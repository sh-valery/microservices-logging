// Code generated by MockGen. DO NOT EDIT.
// Source: fx.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc_gen "github.com/sh-valery/microservices-logging/gateway/internal/rpc_gen"
)

// MockFXRate is a mock of FXRate interface.
type MockFXRate struct {
	ctrl     *gomock.Controller
	recorder *MockFXRateMockRecorder
}

// MockFXRateMockRecorder is the mock recorder for MockFXRate.
type MockFXRateMockRecorder struct {
	mock *MockFXRate
}

// NewMockFXRate creates a new mock instance.
func NewMockFXRate(ctrl *gomock.Controller) *MockFXRate {
	mock := &MockFXRate{ctrl: ctrl}
	mock.recorder = &MockFXRateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFXRate) EXPECT() *MockFXRateMockRecorder {
	return m.recorder
}

// GetFxRate mocks base method.
func (m *MockFXRate) GetFxRate(ctx context.Context, request *rpc_gen.FxServiceRequest) (*rpc_gen.FxServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFxRate", ctx, request)
	ret0, _ := ret[0].(*rpc_gen.FxServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFxRate indicates an expected call of GetFxRate.
func (mr *MockFXRateMockRecorder) GetFxRate(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFxRate", reflect.TypeOf((*MockFXRate)(nil).GetFxRate), ctx, request)
}

// MockUUIDGenerator is a mock of UUIDGenerator interface.
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator.
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance.
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// GenerateUUID mocks base method.
func (m *MockUUIDGenerator) GenerateUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockUUIDGeneratorMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockUUIDGenerator)(nil).GenerateUUID))
}

// MockNow is a mock of Now interface.
type MockNow struct {
	ctrl     *gomock.Controller
	recorder *MockNowMockRecorder
}

// MockNowMockRecorder is the mock recorder for MockNow.
type MockNowMockRecorder struct {
	mock *MockNow
}

// NewMockNow creates a new mock instance.
func NewMockNow(ctrl *gomock.Controller) *MockNow {
	mock := &MockNow{ctrl: ctrl}
	mock.recorder = &MockNowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNow) EXPECT() *MockNowMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockNow) Now() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(string)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockNowMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockNow)(nil).Now))
}
